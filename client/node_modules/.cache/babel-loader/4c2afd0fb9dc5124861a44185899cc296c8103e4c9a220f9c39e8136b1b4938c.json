{"ast":null,"code":"import { useEffect, useRef, useState } from 'react';\nimport { generateColor } from '../util';\nconst INIT_COLOR_REF = {};\nfunction hasValue(value) {\n  return value !== undefined;\n}\nconst useColorState = (defaultStateValue, option) => {\n  const {\n    defaultValue,\n    value\n  } = option;\n  const prevColor = useRef(generateColor(''));\n  const [colorValue, _setColorValue] = useState(() => {\n    let mergedState;\n    if (hasValue(value)) {\n      mergedState = value;\n    } else if (hasValue(defaultValue)) {\n      mergedState = defaultValue;\n    } else {\n      mergedState = defaultStateValue;\n    }\n    const color = generateColor(mergedState || '');\n    prevColor.current = color;\n    return color;\n  });\n  const setColorValue = color => {\n    _setColorValue(color);\n    prevColor.current = color;\n  };\n  const prevValue = useRef(INIT_COLOR_REF);\n  useEffect(() => {\n    // `useEffect` will be executed twice in strict mode even if the deps are the same\n    // So we compare the value manually to avoid unnecessary update\n    if (prevValue.current === value) {\n      return;\n    }\n    prevValue.current = value;\n    const newColor = generateColor(hasValue(value) ? value || '' : prevColor.current);\n    if (prevColor.current.cleared === true) {\n      newColor.cleared = 'controlled';\n    }\n    setColorValue(newColor);\n  }, [value]);\n  return [colorValue, setColorValue, prevColor];\n};\nexport default useColorState;","map":{"version":3,"names":["useEffect","useRef","useState","generateColor","INIT_COLOR_REF","hasValue","value","undefined","useColorState","defaultStateValue","option","defaultValue","prevColor","colorValue","_setColorValue","mergedState","color","current","setColorValue","prevValue","newColor","cleared"],"sources":["/home/favour/Library-Management-System/client/node_modules/antd/es/color-picker/hooks/useColorState.js"],"sourcesContent":["import { useEffect, useRef, useState } from 'react';\nimport { generateColor } from '../util';\nconst INIT_COLOR_REF = {};\nfunction hasValue(value) {\n  return value !== undefined;\n}\nconst useColorState = (defaultStateValue, option) => {\n  const {\n    defaultValue,\n    value\n  } = option;\n  const prevColor = useRef(generateColor(''));\n  const [colorValue, _setColorValue] = useState(() => {\n    let mergedState;\n    if (hasValue(value)) {\n      mergedState = value;\n    } else if (hasValue(defaultValue)) {\n      mergedState = defaultValue;\n    } else {\n      mergedState = defaultStateValue;\n    }\n    const color = generateColor(mergedState || '');\n    prevColor.current = color;\n    return color;\n  });\n  const setColorValue = color => {\n    _setColorValue(color);\n    prevColor.current = color;\n  };\n  const prevValue = useRef(INIT_COLOR_REF);\n  useEffect(() => {\n    // `useEffect` will be executed twice in strict mode even if the deps are the same\n    // So we compare the value manually to avoid unnecessary update\n    if (prevValue.current === value) {\n      return;\n    }\n    prevValue.current = value;\n    const newColor = generateColor(hasValue(value) ? value || '' : prevColor.current);\n    if (prevColor.current.cleared === true) {\n      newColor.cleared = 'controlled';\n    }\n    setColorValue(newColor);\n  }, [value]);\n  return [colorValue, setColorValue, prevColor];\n};\nexport default useColorState;"],"mappings":"AAAA,SAASA,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AACnD,SAASC,aAAa,QAAQ,SAAS;AACvC,MAAMC,cAAc,GAAG,CAAC,CAAC;AACzB,SAASC,QAAQA,CAACC,KAAK,EAAE;EACvB,OAAOA,KAAK,KAAKC,SAAS;AAC5B;AACA,MAAMC,aAAa,GAAGA,CAACC,iBAAiB,EAAEC,MAAM,KAAK;EACnD,MAAM;IACJC,YAAY;IACZL;EACF,CAAC,GAAGI,MAAM;EACV,MAAME,SAAS,GAAGX,MAAM,CAACE,aAAa,CAAC,EAAE,CAAC,CAAC;EAC3C,MAAM,CAACU,UAAU,EAAEC,cAAc,CAAC,GAAGZ,QAAQ,CAAC,MAAM;IAClD,IAAIa,WAAW;IACf,IAAIV,QAAQ,CAACC,KAAK,CAAC,EAAE;MACnBS,WAAW,GAAGT,KAAK;IACrB,CAAC,MAAM,IAAID,QAAQ,CAACM,YAAY,CAAC,EAAE;MACjCI,WAAW,GAAGJ,YAAY;IAC5B,CAAC,MAAM;MACLI,WAAW,GAAGN,iBAAiB;IACjC;IACA,MAAMO,KAAK,GAAGb,aAAa,CAACY,WAAW,IAAI,EAAE,CAAC;IAC9CH,SAAS,CAACK,OAAO,GAAGD,KAAK;IACzB,OAAOA,KAAK;EACd,CAAC,CAAC;EACF,MAAME,aAAa,GAAGF,KAAK,IAAI;IAC7BF,cAAc,CAACE,KAAK,CAAC;IACrBJ,SAAS,CAACK,OAAO,GAAGD,KAAK;EAC3B,CAAC;EACD,MAAMG,SAAS,GAAGlB,MAAM,CAACG,cAAc,CAAC;EACxCJ,SAAS,CAAC,MAAM;IACd;IACA;IACA,IAAImB,SAAS,CAACF,OAAO,KAAKX,KAAK,EAAE;MAC/B;IACF;IACAa,SAAS,CAACF,OAAO,GAAGX,KAAK;IACzB,MAAMc,QAAQ,GAAGjB,aAAa,CAACE,QAAQ,CAACC,KAAK,CAAC,GAAGA,KAAK,IAAI,EAAE,GAAGM,SAAS,CAACK,OAAO,CAAC;IACjF,IAAIL,SAAS,CAACK,OAAO,CAACI,OAAO,KAAK,IAAI,EAAE;MACtCD,QAAQ,CAACC,OAAO,GAAG,YAAY;IACjC;IACAH,aAAa,CAACE,QAAQ,CAAC;EACzB,CAAC,EAAE,CAACd,KAAK,CAAC,CAAC;EACX,OAAO,CAACO,UAAU,EAAEK,aAAa,EAAEN,SAAS,CAAC;AAC/C,CAAC;AACD,eAAeJ,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}